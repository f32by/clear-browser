--- a/third_party/blink/renderer/core/dom/document.cc
+++ b/third_party/blink/renderer/core/dom/document.cc
@@ -1277,6 +1277,10 @@ Document::Document(const DocumentInit& i
   liveDocumentSet().insert(this);
 #endif
 
+  // Precompute -0.0003% to 0.0003% noise factor for get*ClientRect*() fingerprinting
+  noise_factor_x_ = 1 + (base::RandDouble() - 0.5) * 0.000003;
+  noise_factor_y_ = 1 + (base::RandDouble() - 0.5) * 0.000003;
+
   if (frame_ && frame_->GetPage()->GetAgentMetricsCollector())
     frame_->GetPage()->GetAgentMetricsCollector()->DidAttachDocument(*this);
 }
@@ -1291,6 +1295,14 @@ Document::~Document() {
   InstanceCounters::DecrementCounter(InstanceCounters::kDocumentCounter);
 }
 
+double Document::GetNoiseFactorX() {
+  return noise_factor_x_;
+}
+
+double Document::GetNoiseFactorY() {
+  return noise_factor_y_;
+}
+
 Range* Document::CreateRangeAdjustedToTreeScope(const TreeScope& tree_scope,
                                                 const Position& position) {
   DCHECK(position.IsNotNull());
--- a/third_party/blink/renderer/core/dom/document.h
+++ b/third_party/blink/renderer/core/dom/document.h
@@ -414,6 +414,10 @@ class CORE_EXPORT Document : public Cont
     has_xml_declaration_ = has_xml_declaration ? 1 : 0;
   }
 
+  // Values for get*ClientRect fingerprint deception
+  double GetNoiseFactorX();
+  double GetNoiseFactorY();
+
   String visibilityState() const;
   bool IsPageVisible() const;
   bool hidden() const;
@@ -1958,6 +1962,9 @@ class CORE_EXPORT Document : public Cont
 
   base::ElapsedTimer start_time_;
 
+  double noise_factor_x_;
+  double noise_factor_y_;
+
   Member<ScriptRunner> script_runner_;
 
   HeapVector<Member<ScriptElementBase>> current_script_stack_;
--- a/third_party/blink/renderer/core/dom/element.cc
+++ b/third_party/blink/renderer/core/dom/element.cc
@@ -1902,6 +1902,12 @@ DOMRectList* Element::getClientRects() {
   DCHECK(element_layout_object);
   GetDocument().AdjustFloatQuadsForScrollAndAbsoluteZoom(
       quads, *element_layout_object);
+
+  for (auto& quad : quads) {
+    quad.Scale(GetDocument().GetNoiseFactorX(),
+               GetDocument().GetNoiseFactorY());
+  }
+
   return DOMRectList::Create(quads);
 }
 
@@ -1919,6 +1925,10 @@ DOMRect* Element::getBoundingClientRect(
   DCHECK(element_layout_object);
   GetDocument().AdjustFloatRectForScrollAndAbsoluteZoom(result,
                                                         *element_layout_object);
+
+  result.Scale(GetDocument().GetNoiseFactorX(),
+               GetDocument().GetNoiseFactorY());
+
   return DOMRect::FromFloatRect(result);
 }
 
--- a/third_party/blink/renderer/core/dom/range.cc
+++ b/third_party/blink/renderer/core/dom/range.cc
@@ -1631,11 +1631,19 @@ DOMRectList* Range::getClientRects() con
   Vector<FloatQuad> quads;
   GetBorderAndTextQuads(quads);
 
+  for (FloatQuad& quad : quads) {
+    quad.Scale(owner_document_->GetNoiseFactorX(),
+               owner_document_->GetNoiseFactorY());
+  }
+
   return DOMRectList::Create(quads);
 }
 
 DOMRect* Range::getBoundingClientRect() const {
-  return DOMRect::FromFloatRect(BoundingRect());
+  auto rect = BoundingRect();
+  rect.Scale(owner_document_->GetNoiseFactorX(),
+             owner_document_->GetNoiseFactorY());
+  return DOMRect::FromFloatRect(rect);
 }
 
 // TODO(editing-dev): We should make
--- a/third_party/blink/renderer/platform/BUILD.gn
+++ b/third_party/blink/renderer/platform/BUILD.gn
@@ -1478,7 +1478,10 @@ jumbo_component("platform") {
     "//third_party/blink/renderer:non_test_config",
   ]
 
-  include_dirs = []
+  include_dirs = [
+    # For shuffler in graphics/static_bitmap_image.cc
+    "//third_party/skia/include/private",
+  ]
 
   public_deps = [
     ":blink_platform_public_deps",
--- a/third_party/blink/renderer/platform/graphics/image_data_buffer.cc
+++ b/third_party/blink/renderer/platform/graphics/image_data_buffer.cc
@@ -34,6 +34,8 @@
 
 #include <memory>
 
+#include "base/logging.h"
+#include "base/rand_util.h"
 #include "base/compiler_specific.h"
 #include "base/memory/ptr_util.h"
 #include "third_party/blink/renderer/platform/graphics/static_bitmap_image.h"
@@ -130,6 +132,10 @@ bool ImageDataBuffer::EncodeImageInterna
                                           const SkPixmap& pixmap) const {
   DCHECK(is_valid_);
 
+  // shuffle subchannel color data within the pixmap
+  StaticBitmapImage::ShuffleSubchannelColorData(pixmap_.writable_addr(),
+                                                pixmap_.info(), 0, 0);
+
   if (mime_type == kMimeTypeJpeg) {
     SkJpegEncoder::Options options;
     options.fQuality = ImageEncoder::ComputeJpegQuality(quality);
--- a/third_party/blink/renderer/platform/graphics/static_bitmap_image.cc
+++ b/third_party/blink/renderer/platform/graphics/static_bitmap_image.cc
@@ -4,6 +4,8 @@
 
 #include "third_party/blink/renderer/platform/graphics/static_bitmap_image.h"
 
+#include "base/logging.h"
+#include "base/rand_util.h"
 #include "base/numerics/checked_math.h"
 #include "gpu/command_buffer/client/gles2_interface.h"
 #include "third_party/blink/renderer/platform/graphics/accelerated_static_bitmap_image.h"
@@ -11,11 +13,13 @@
 #include "third_party/blink/renderer/platform/graphics/image_observer.h"
 #include "third_party/blink/renderer/platform/graphics/paint/paint_image.h"
 #include "third_party/blink/renderer/platform/graphics/unaccelerated_static_bitmap_image.h"
+#include "third_party/blink/renderer/platform/runtime_enabled_features.h"
 #include "third_party/skia/include/core/SkCanvas.h"
 #include "third_party/skia/include/core/SkImage.h"
 #include "third_party/skia/include/core/SkPaint.h"
 #include "third_party/skia/include/core/SkSurface.h"
 #include "third_party/skia/include/gpu/GrContext.h"
+#include "third_party/skia/include/private/SkColorData.h"
 #include "v8/include/v8.h"
 
 namespace blink {
@@ -117,6 +121,9 @@ bool StaticBitmapImage::CopyToByteArray(
   DCHECK(read_pixels_successful ||
          !sk_image->bounds().intersect(SkIRect::MakeXYWH(
              rect.X(), rect.Y(), info.width(), info.height())));
+
+  ShuffleSubchannelColorData(dst.data(), info, rect.X(), rect.Y());
+
   return true;
 }
 
@@ -125,4 +132,157 @@ const gpu::SyncToken& StaticBitmapImage:
   return sync_token;
 }
 
+// set the component to maximum-delta if it is >= maximum, or add to existing color component (color + delta)
+#define shuffleComponent(color, max, delta) \
+        ((color) >= (max) ? ((max)-(delta)) : ((color)+(delta)))
+
+#define writable_addr(T, p, stride, x, y) (T*) \
+                     ((const char *)p + y * stride + x * sizeof(T))
+
+void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr,
+                                                   const SkImageInfo& info,
+                                                   int srcX,
+                                                   int srcY) {
+  auto w = info.width() - srcX, h = info.height() - srcY;
+
+  // skip tiny images; info.width()/height() can also be 0
+  if ((w < 8) || (h < 8)) {
+    return;
+  }
+
+  // generate the first random number here
+  double shuffleX = base::RandDouble();
+
+  // cap maximum pixels to change
+  auto pixels = (w + h) / 128;
+  if (pixels > 10) {
+    pixels = 10;
+  } else if (pixels < 2) {
+    pixels = 2;
+  }
+
+  auto colorType = info.colorType();
+  auto fRowBytes = info.minRowBytes();
+
+  DLOG(INFO) << "BRM: ShuffleSubchannelColorData()"
+             << " w=" << w
+             << " h=" << h
+             << " colorType=" << colorType
+             << " fRowBytes=" << fRowBytes;
+
+  // second random number (for y/height)
+  double shuffleY = base::RandDouble();
+
+  // calculate random coordinates using bisection
+  auto currentW = w, currentH = h;
+  for(;pixels >= 0; pixels--) {
+    int x = currentW * shuffleX, y = currentH * shuffleY;
+
+    // calculate randomisation amounts for each RGB component
+    uint8_t shuffleR = base::RandInt(0, 4);
+    uint8_t shuffleG = (shuffleR + x) % 4;
+    uint8_t shuffleB = (shuffleG + y) % 4;
+
+    // manipulate pixel data to slightly change the R, G, B components
+    switch (colorType) {
+      case kAlpha_8_SkColorType:
+      {
+        auto *pixel = writable_addr(uint8_t, addr, fRowBytes, x, y);
+
+        auto a = SkColorGetA(*pixel);
+        auto r = shuffleComponent(SkColorGetR(*pixel), UINT8_MAX-1, shuffleR);
+        auto g = shuffleComponent(SkColorGetG(*pixel), UINT8_MAX-1, shuffleG);
+        auto b = shuffleComponent(SkColorGetB(*pixel), UINT8_MAX-1, shuffleB);
+
+        *pixel = SkColorSetARGB(a, r, g, b);
+      }
+      break;
+      case kGray_8_SkColorType:
+      {
+         auto *pixel = writable_addr(uint8_t, addr, fRowBytes, x, y);
+         *pixel = shuffleComponent(*pixel, UINT8_MAX-1, shuffleB);
+      }
+      break;
+      case kRGB_565_SkColorType:
+      {
+         auto *pixel = writable_addr(uint16_t, addr, fRowBytes, x, y);
+
+         unsigned r = shuffleComponent(SkPacked16ToR32(*pixel), 31, shuffleR);
+         unsigned g = shuffleComponent(SkPacked16ToG32(*pixel), 63, shuffleG);
+         unsigned b = shuffleComponent(SkPacked16ToB32(*pixel), 31, shuffleB);
+
+         unsigned r16 = (r & SK_R16_MASK) << SK_R16_SHIFT;
+         unsigned g16 = (g & SK_G16_MASK) << SK_G16_SHIFT;
+         unsigned b16 = (b & SK_B16_MASK) << SK_B16_SHIFT;
+
+         *pixel = r16 | g16 | b16;
+      }
+      break;
+      case kARGB_4444_SkColorType:
+      {
+         auto *pixel = writable_addr(uint16_t, addr, fRowBytes, x, y);
+
+         auto a = SkGetPackedA4444(*pixel);
+         auto r = shuffleComponent(SkGetPackedR4444(*pixel), 15, shuffleR);
+         auto g = shuffleComponent(SkGetPackedG4444(*pixel), 15, shuffleG);
+         auto b = shuffleComponent(SkGetPackedB4444(*pixel), 15, shuffleB);
+
+         unsigned a4 = (a & 0xF) << SK_A4444_SHIFT;
+         unsigned r4 = (r & 0xF) << SK_R4444_SHIFT;
+         unsigned g4 = (g & 0xF) << SK_G4444_SHIFT;
+         unsigned b4 = (b & 0xF) << SK_B4444_SHIFT;
+
+         *pixel = r4 | b4 | g4 | a4;
+      }
+      break;
+      case kRGBA_8888_SkColorType:
+      {
+         auto *pixel = writable_addr(uint32_t, addr, fRowBytes, x, y);
+         auto a = SkGetPackedA32(*pixel);
+         auto r = shuffleComponent(SkGetPackedR32(*pixel), UINT8_MAX-1, shuffleR);
+         auto g = shuffleComponent(SkGetPackedG32(*pixel), UINT8_MAX-1, shuffleG);
+         auto b = shuffleComponent(SkGetPackedB32(*pixel), UINT8_MAX-1, shuffleB);
+
+         *pixel = (a << SK_A32_SHIFT) | (r << SK_R32_SHIFT) |
+                  (g << SK_G32_SHIFT) | (b << SK_B32_SHIFT);
+      }
+      break;
+      case kBGRA_8888_SkColorType:
+      {
+         auto *pixel = writable_addr(uint32_t, addr, fRowBytes, x, y);
+
+         auto a = SkGetPackedA32(*pixel);
+         auto r = shuffleComponent(SkGetPackedB32(*pixel), UINT8_MAX-1, shuffleR);
+         auto g = shuffleComponent(SkGetPackedG32(*pixel), UINT8_MAX-1, shuffleG);
+         auto b = shuffleComponent(SkGetPackedR32(*pixel), UINT8_MAX-1, shuffleB);
+
+         *pixel = (a << SK_BGRA_A32_SHIFT) | (r << SK_BGRA_R32_SHIFT) |
+                  (g << SK_BGRA_G32_SHIFT) | (b << SK_BGRA_B32_SHIFT);
+      }
+      break;
+      default:
+         // the remaining formats are not expected to be used in Chromium
+         LOG(WARNING) <<
+            "BRM: ShuffleSubchannelColorData(): Ignoring pixel format";
+         return;
+    }
+
+    // keep bisecting or reset current width/height as needed
+    if (x == 0) {
+       currentW = w;
+    } else {
+       currentW = x;
+    }
+    if (y == 0) {
+       currentH = h;
+    } else {
+       currentH = y;
+    }
+  }
+}
+
+#undef writable_addr
+#undef shuffleComponent
+
+
 }  // namespace blink
--- a/third_party/blink/renderer/platform/graphics/static_bitmap_image.h
+++ b/third_party/blink/renderer/platform/graphics/static_bitmap_image.h
@@ -30,6 +30,11 @@ class PLATFORM_EXPORT StaticBitmapImage 
   static scoped_refptr<StaticBitmapImage> Create(sk_sp<SkData> data,
                                                  const SkImageInfo&);
 
+  static void ShuffleSubchannelColorData(const void *addr,
+                                         const SkImageInfo& info,
+                                         int srcX,
+                                         int srcY);
+
   bool IsStaticBitmapImage() const override { return true; }
 
   // Methods overridden by all sub-classes
